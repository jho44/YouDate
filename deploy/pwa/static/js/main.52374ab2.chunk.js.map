{"version":3,"sources":["datifyLogo.png","firebase.js","spotify.js","components/Landing.js","Context.js","helpers.js","PrivateRoute.js","components/common/About.js","components/common/Tidbit.js","components/common/QA.js","components/common/SpotifyDataBlock.js","components/common/MatchInfo.js","components/Meet.js","components/common/InputForm.js","components/common/EditInfo.js","components/Profile.js","components/Matched.js","components/Navbar.js","components/InfoForm.js","fileUpload.js","components/NotFound.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","backendUrl","frontendUrl","loginUrl","join","useStyles","makeStyles","login","display","placeItems","height","backgroundColor","width","padding","borderRadius","fontWeight","color","textDecoration","borderColor","Landing","state","classes","className","src","Logo","alt","style","maxHeight","href","AuthContext","React","createContext","ContextProvider","children","useState","tokens","setTokens","user","setUser","unmetList","setUnmetList","unmetListInd","setUnmetListInd","Provider","value","Option","Select","processUserInfo","datifyUser","Q","A","life_goal","believe_or_not","life_peaked","feel_famous","biggest_risk","key","val","desired_relationship","education","occupation","sexual_orientation","location","political_view","process","REACT_APP_ENVIRONMENT","today","Date","age","getFullYear","birth_month","_DateTime__date","_Date__year","getMonth","_Date__month","DesiredRelationship","child","name","label","rules","required","Education","Occupation","SexualOrientation","Location","PoliticalView","allowClear","Height","LifeGoal","BelieveOrNot","LifePeaked","FeelFamous","BiggestRisk","tidbits","QAs","createInfoItems","contents","map","tidbit","ind","push","QA","factsData","values","tidbitData","QAData","PrivateRoute","useContext","useLocation","navigate","useNavigate","useEffect","code","URLSearchParams","search","get","localToken","access_token","refresh_token","user_id","email","pic","pronouns","description","top_artists","top_songs","fetch","pathname","then","res","json","accessToken","refreshToken","data","catch","err","console","error","About","offsetY","backgroundImage","transform","border","Person","replace","Tidbit","Component","PersonIcon","content","marginBottom","alignItems","fontSize","marginRight","SpotifyDataBlock","userContent","type","setContent","getContent","useCallback","a","Promise","all","thing","method","headers","Authorization","response","js","artists","items","images","url","urlTry","tracks","album","img","item","urls","paddingLeft","Title","Typography","MatchInfo","meet","dislike","like","artists_in_common","length","level","songs_in_common","component","SearchIcon","SchoolIcon","WorkIcon","FavoriteIcon","LocationOnIcon","AccountBalanceIcon","HeightIcon","qa","position","bottom","left","justifyContent","ghost","size","icon","CloseOutlined","onClick","CheckOutlined","Meet","setOffsetY","desiredRelationship","unmetUser","setUnmetUser","loading","setLoading","handleScroll","window","pageYOffset","getNextUser","newList","newUser","filter","artist","includes","song","addEventListener","removeEventListener","body","JSON","stringify","userid_a","userid_b","statusCode","latestInd","Item","Form","InfoFormItem","props","InputForm","profile","resetImg","form","onFinish","onReset","resetFields","layout","htmlType","EditInfo","useForm","createEditInfoItems","facts","mode","credentials","res_data","Profile","deleteAccChecked","setDeleteAccChecked","logout","open","delete","checked","onChange","Modal","confirm","centered","title","ExclamationCircleOutlined","onOk","onCancel","ProfileModal","openModal","closeProfile","matchUser","visible","closable","footer","bodyStyle","Match","matchList","index","imgPath","contact","setMatchList","setOpenModal","marginLeft","splice","Matched","handleChange","list","margin","textAlign","NavbarBtn","link","to","Navbar","MessageOutlined","UserOutlined","Paragraph","InfoForm","setImg","validImg","setValidImg","fileList","setFileList","picker","listType","showUploadList","beforeUpload","file","callback","isJpgOrPng","message","isLt2M","validPic","info","reader","FileReader","result","readAsDataURL","getBase64","imageUrl","PlusOutlined","marginTop","valuePropName","_d","qas","NotFound","App","exact","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","origin","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.52374ab2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/datifyLogo.e2b01df3.png\";","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBKiyluRRzKamxd8NgFmYduWxerInedvR0\",\n  authDomain: \"datify-49ddc.firebaseapp.com\",\n  projectId: \"datify-49ddc\",\n  storageBucket: \"datify-49ddc.appspot.com\",\n  messagingSenderId: \"426040737519\",\n  appId: \"1:426040737519:web:68c4717f117fff6344651a\",\n  measurementId: \"G-2D806J8GZC\",\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\nexport const backendUrl = process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8000\"\n    : \"http://ec2-3-144-103-133.us-east-2.compute.amazonaws.com:8000\";\nexport const frontendUrl = process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:3000\"\n    : \"http://youdate.s3-website.us-east-2.amazonaws.com\";\n","import { frontendUrl } from \"./firebase\";\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst clientId = \"9cf53a8f93444cadac7b3e6d990a9e6d\";\nconst scopes = [\"user-top-read\", \"user-read-email\"];\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&response_type=code&scope=${scopes.join(\n  \"%20\"\n)}&redirect_uri=${frontendUrl}`;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Logo from \"../datifyLogo.png\";\nimport { loginUrl } from \"../spotify\";\n\nconst useStyles = makeStyles({\n  login: {\n    display: \"grid\",\n    placeItems: \"center\",\n    height: \"100vh\",\n    backgroundColor: \"black\",\n\n    \"& img\": {\n      width: \"50%\",\n    },\n\n    \"& a\": {\n      padding: \"20px\",\n      borderRadius: \"99px\",\n      backgroundColor: \"#EE82EE\",\n      fontWeight: 600,\n      color: \"white\",\n      textDecoration: \"none\",\n    },\n\n    \"& a:hover\": {\n      backgroundColor: \" white\",\n      borderColor: \"#1db954\",\n      color: \"#EE82EE\",\n    },\n  },\n});\n\n/**\n * Class Component that renders our Login/Landing page and redirects us to either:\n * 1. the page we came from that required authentication\n * 2. the \"Meet\" page\n *\n * @param {String} state - `\"path/of/last/page/we/were/on\"`\n * @returns {HTML} Landing page, which includes Datify's logo and \"LOGIN\" button\n *\n * @class\n */\nfunction Landing({ state }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.login}>\n      <img\n        src={Logo}\n        alt=\"Youdate Logo\"\n        style={{\n          maxHeight: \"35vh\",\n          display: \"block\",\n          width: \"auto\",\n          height: \"auto\",\n        }}\n      />\n      <a href={`${loginUrl}${state && state !== \"/\" ? state : \"/meet/\"}`}>\n        LOGIN WITH SPOTIFY\n      </a>\n    </div>\n  );\n}\n\nexport default Landing;\n","import React, { useState } from \"react\";\n\n/**\n * React Context object that contains a Provider and Consumer Component.\n * @typedef AuthContext\n */\nexport const AuthContext = React.createContext(null);\n\n/**\n * Provider from AuthContext for handling some near-global states.\n * @property {Component} children - Consumers (everything within our Router).\n * @class\n */\nexport const ContextProvider = ({ children }) => {\n  /**\n   * @description Logged-in user's access and refresh tokens\n   * @typedef {Object} tokens\n   * @memberof ContextProvider\n   */\n  /**\n   * @typedef {Function} setTokens\n   * @param {Object} newState - The new Spotify tokens of the user who just logged in.\n   * @description Sets `tokens` to `newState`.\n   * @returns {void}\n   * @memberof ContextProvider\n   */\n  const [tokens, setTokens] = useState(null);\n\n  /**\n   * @description Logged-in user's info\n   * @typedef {Object} user\n   * @memberof ContextProvider\n   */\n  /**\n   * @typedef {Function} setUser\n   * @param {Object} newState - The user who's just logged in.\n   * @description Sets `user` to `newState`.\n   * @returns {void}\n   * @memberof ContextProvider\n   */\n  const [user, setUser] = useState(null);\n\n  /**\n   * @description Logged-in user's list of unmet users.\n   * @typedef {Object} unmetList\n   * @memberof ContextProvider\n   */\n  /**\n   * @typedef {Function} setUnmetList\n   * @param {Object} newState - The next set of users the current user hasn't met.\n   * @description Sets `unmetList` to `newState`.\n   * @returns {void}\n   * @memberof ContextProvider\n   */\n  const [unmetList, setUnmetList] = useState([]);\n\n  /**\n   * @description Index of the next unmet user to appear on Meet page.\n   * @typedef {Object} unmetListInd\n   * @memberof ContextProvider\n   */\n  /**\n   * @typedef {Function} setUnmetListInd\n   * @param {Object} newState - The next index in `unmetList` that should appear on Meet page.\n   * @description Sets `unmetListInd` to `newState`.\n   * @returns {void}\n   * @memberof ContextProvider\n   */\n  const [unmetListInd, setUnmetListInd] = useState(0);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        tokens,\n        setTokens,\n        user,\n        setUser,\n        unmetList,\n        setUnmetList,\n        unmetListInd,\n        setUnmetListInd,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Input, Select } from \"antd\";\n\nconst { Option } = Select;\n\n/**\n * This file stores helper functions to do with Tidbits and QAs.\n * This makes it easier to add tidbits and questions later on.\n */\n\n/**\n * Function to process an user object into the proper form for\n * Tidbits and QAs.\n * @param {Object} user - the user that is being processed\n * @returns {Object}\n */\nexport function processUserInfo(user) {\n  const datifyUser = { ...user };\n  datifyUser[\"QAs\"] = [\n    {\n      Q: \"Life goal of mine...\",\n      A: datifyUser.life_goal,\n    },\n    {\n      Q: \"Believe it or not, I...\",\n      A: datifyUser.believe_or_not,\n    },\n    {\n      Q: \"My life peaked when...\",\n      A: datifyUser.life_peaked,\n    },\n    {\n      Q: \"I feel famous when...\",\n      A: datifyUser.feel_famous,\n    },\n    {\n      Q: \"Biggest risk I've ever taken\",\n      A: datifyUser.biggest_risk,\n    },\n  ];\n\n  const qas = [\n    \"life_goal\",\n    \"believe_or_not\",\n    \"life_peaked\",\n    \"feel_famous\",\n    \"biggest_risk\",\n  ];\n  for (const qa of qas) {\n    delete datifyUser[qa];\n  }\n\n  datifyUser[\"tidbits\"] = [\n    {\n      key: \"desired_relationship\",\n      val: datifyUser.desired_relationship,\n    },\n    {\n      key: \"education\",\n      val: datifyUser.education,\n    },\n    {\n      key: \"occupation\",\n      val: datifyUser.occupation,\n    },\n    {\n      key: \"sexual_orientation\",\n      val: datifyUser.sexual_orientation,\n    },\n    {\n      key: \"location\",\n      val: datifyUser.location,\n    },\n    {\n      key: \"political_view\",\n      val: datifyUser.political_view,\n    },\n    {\n      key: \"height\",\n      val: datifyUser.height,\n    },\n  ];\n\n  const tidbits = [\n    \"desired_relationship\",\n    \"education\",\n    \"occupation\",\n    \"sexual_orientation\",\n    \"location\",\n    \"political_view\",\n    \"height\",\n  ];\n  for (const tidbit of tidbits) {\n    delete datifyUser[tidbit];\n  }\n\n  if (!process.env.REACT_APP_ENVIRONMENT) {\n    const today = new Date();\n    let age =\n      today.getFullYear() - datifyUser.birth_month._DateTime__date._Date__year;\n    const m =\n      today.getMonth() - datifyUser.birth_month._DateTime__date._Date__month;\n    if (m < 0) age--;\n    datifyUser[\"age\"] = age;\n  }\n\n  return datifyUser;\n}\n\n/**\n * Useful functions for the EditInfo subcomponent\n * (used by the Profile component) and the InfoForm component.\n * Used to create the form items for editing the Tidbits and QAs\n * for a user and the inital info gathering form for a new user.\n */\n\n/* Tidbits */\nconst DesiredRelationship = () => {\n  return {\n    child: (\n      <Select style={{ width: \"50%\" }}>\n        <Option value=\"casual\">Go with the flow</Option>\n        <Option value=\"short-term\">Short Term</Option>\n        <Option value=\"long-term\">Long Term</Option>\n        <Option value=\"other\">Other</Option>\n      </Select>\n    ),\n    name: \"desired_relationship\",\n    label: \"Desired Relationship\",\n    rules: [{ required: true }],\n  };\n};\n\nconst Education = () => {\n  return {\n    child: <Input />,\n    name: \"education\",\n    label: \"Education\",\n  };\n};\n\nconst Occupation = () => {\n  return {\n    child: <Input />,\n    name: \"occupation\",\n    label: \"Occupation\",\n  };\n};\n\nconst SexualOrientation = () => {\n  return {\n    child: <Input />,\n    name: \"sexual_orientation\",\n    label: \"Sexual Orientation\",\n  };\n};\n\nconst Location = () => {\n  return {\n    child: <Input />,\n    name: \"location\",\n    label: \"My Location\",\n  };\n};\n\nconst PoliticalView = () => {\n  return {\n    child: (\n      <Select style={{ width: \"50%\" }} allowClear>\n        <Option value=\"anarchism\">Anarchism</Option>\n        <Option value=\"communism\">Communism</Option>\n        <Option value=\"conservatism\">Conservatism</Option>\n        <Option value=\"environmentalism\">Environmentalism</Option>\n        <Option value=\"fascism\">Fascism</Option>\n        <Option value=\"feminism\">Feminism</Option>\n        <Option value=\"liberalism\">Liberalism</Option>\n        <Option value=\"nationalism\">Nationalism</Option>\n        <Option value=\"populism\">Populism</Option>\n        <Option value=\"socialism\">Socialism</Option>\n        <Option value=\"other\">Other</Option>\n      </Select>\n    ),\n    name: \"political_view\",\n    label: \"Political View\",\n  };\n};\n\nconst Height = () => {\n  return {\n    child: <Input />,\n    name: \"height\",\n    label: \"Height\",\n  };\n};\n\n/* QAs */\nconst LifeGoal = () => {\n  return {\n    child: <Input />,\n    name: \"life_goal\",\n    label: \"Life goal of mine...\",\n  };\n};\n\nconst BelieveOrNot = () => {\n  return {\n    child: <Input />,\n    name: \"believe_or_not\",\n    label: \"Believe it or not, I...\",\n  };\n};\n\nconst LifePeaked = () => {\n  return {\n    child: <Input />,\n    name: \"life_peaked\",\n    label: \"My life peaked when...\",\n  };\n};\n\nconst FeelFamous = () => {\n  return {\n    child: <Input />,\n    name: \"feel_famous\",\n    label: \"I feel famous when...\",\n  };\n};\n\nconst BiggestRisk = () => {\n  return {\n    child: <Input />,\n    name: \"biggest_risk\",\n    label: \"Biggest risk I've ever taken\",\n  };\n};\n\nconst tidbits = [\n  DesiredRelationship(),\n  Education(),\n  Occupation(),\n  SexualOrientation(),\n  Location(),\n  PoliticalView(),\n  Height(),\n];\nconst QAs = [\n  LifeGoal(),\n  BelieveOrNot(),\n  LifePeaked(),\n  FeelFamous(),\n  BiggestRisk(),\n];\n\n/**\n * Function to generate the Tidbits and QAs in the EditInfo subcomponent.\n * @param {Object} user - the user that is viewing their Profile page to edit\n * their Tidbits or QAs\n * @returns {Array.<Object>}\n */\nexport function createEditInfoItems(user) {\n  let content = [];\n  user.tidbits.map((tidbit, ind) => {\n    const { key, val } = tidbit;\n    let item;\n    switch (key) {\n      case \"desired_relationship\":\n        item = DesiredRelationship();\n        break;\n      case \"education\":\n        item = Education();\n        break;\n      case \"occupation\":\n        item = Occupation();\n        break;\n      case \"sexual_orientation\":\n        item = SexualOrientation();\n        break;\n      case \"location\":\n        item = Location();\n        break;\n      case \"political_view\":\n        item = PoliticalView();\n        break;\n      case \"height\":\n        item = Height();\n        break;\n      default:\n    }\n    if (val) {\n      item[\"initialValue\"] = val;\n      item[\"defaultValue\"] = val;\n    }\n    return content.push(item);\n  });\n  user.QAs.map((QA, ind) => {\n    let item;\n    switch (QA.Q) {\n      case \"Life goal of mine...\":\n        item = LifeGoal();\n        break;\n      case \"Believe it or not, I...\":\n        item = BelieveOrNot();\n        break;\n      case \"My life peaked when...\":\n        item = LifePeaked();\n        break;\n      case \"I feel famous when...\":\n        item = FeelFamous();\n        break;\n      case \"Biggest risk I've ever taken\":\n        item = BiggestRisk();\n        break;\n      default:\n    }\n    if (QA.A) item[\"initialValue\"] = QA.A;\n    return content.push(item);\n  });\n  return content;\n}\n\n/**\n * Function to generate the Tidbits and QAs in the InfoForm component.\n * @param {Array.<Object>} contents - the other fields of the form that the Tidbits\n * and QAs will be added onto\n * @returns {Array.<Object>}\n */\nexport function createInfoItems(contents) {\n  tidbits.map((tidbit, ind) => {\n    return contents.push(tidbit);\n  });\n  QAs.map((QA, ind) => {\n    return contents.push(QA);\n  });\n  return contents;\n}\n\n/**\n * Function to match the Tidbits and QAs with the form onFinish\n * in the EditInfo subcomponent.\n * @param {Object} values - the values of the fields of the edit Tidbits\n * and QAs form\n * @returns {Object}\n */\nexport function factsData(values) {\n  return {\n    ...tidbitData(values),\n    ...QAData(values),\n  };\n}\n\n/**\n * Function to match the Tidbits with the form in the InfoForm component.\n * @param {Object} values - the values of the fields of the edit Tidbits\n * @returns {Object}\n */\nexport function tidbitData(values) {\n  return {\n    desired_relationship: values.desired_relationship || null,\n    education: values.education || null,\n    occupation: values.occupation || null,\n    sexual_orientation: values.sexual_orientation || null,\n    location: values.location || null,\n    political_view: values.political_view || null,\n    height: values.height || null,\n  };\n}\n\n/**\n * Function to match the QAs with the form the InfoForm component.\n * @param {Object} values - the values of the fields of the edit QAs\n * @returns {Object}\n */\nexport function QAData(values) {\n  return {\n    life_goal: values.life_goal || null,\n    believe_or_not: values.believe_or_not || null,\n    life_peaked: values.life_peaked || null,\n    feel_famous: values.feel_famous || null,\n    biggest_risk: values.biggest_risk || null,\n  };\n}\n","import React, { useEffect, useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Landing from \"./components/Landing\";\nimport { AuthContext } from \"./Context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { processUserInfo } from \"./helpers\";\nimport { frontendUrl, backendUrl } from \"./firebase\";\n\n/**\n * Private route wrapper that checks whether the user is logged in\n * before sending them to the right page.\n *\n * @property {Component} children - the page to send the user to if\n * they're already logged in\n * @returns {HTML} Conditionally returns `component` if logged in,\n * else renders Login/Landing page.\n *\n * @class\n */\nconst PrivateRoute = ({ children }) => {\n  const {\n    /**\n     * Function from `ContextProvider` for setting logged-in user's access and refresh tokens.\n     * @type {Function}\n     * @memberof PrivateRoute\n     */\n    setTokens,\n    /**\n     * `ContextProvider` state of logged-in user's access and refresh tokens.\n     * @type {Object}\n     * @memberof PrivateRoute\n     */\n    tokens,\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof PrivateRoute\n     */\n    user,\n    /**\n     * Function from `ContextProvider` for setting logged-in user's info.\n     * @type {Function}\n     * @memberof PrivateRoute\n     */\n    setUser,\n  } = useContext(AuthContext);\n\n  let location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const code = new URLSearchParams(location.search).get(\"code\");\n    let localToken = null;\n    if (\n      tokens === null &&\n      process.env.REACT_APP_ENVIRONMENT &&\n      process.env.REACT_APP_ENVIRONMENT === \"test\"\n    ) {\n      setTokens({\n        access_token: \"fake_token\",\n        refresh_token: \"fake_token\",\n      });\n      const user = processUserInfo({\n        user_id: \"fake_test_user_id\",\n        email: \"fakeemail@fake.com\",\n        pic: null,\n        name: \"Fake User\",\n        pronouns: \"fake pronouns\",\n        age: 0,\n        description: \"fake description\",\n        top_artists: [],\n        top_songs: [],\n        life_goal: \"fake life goal\",\n        believe_or_not: \"fake believe it or not\",\n        life_peaked: \"fake life peaked\",\n        feel_famous: \"fake feel famous\",\n        biggest_risk: \"fake biggest risk\",\n        desired_relationship: \"Other\",\n        education: \"fake education\",\n        occupation: \"fake occupation\",\n        sexual_orientation: \"fake sexual orientation\",\n        location: \"fake location\",\n        political_view: \"fake political view\",\n        height: \"fake height\",\n      });\n      setUser(user);\n    } else if (tokens === null && code) {\n      fetch(\n        `${backendUrl}/accessToken?code=${code}&redirect=${frontendUrl}${location.pathname}`\n      )\n        .then((res) => res.json())\n        .then((res) => {\n          setTokens({\n            accessToken: res.access_token,\n            refreshToken: res.refresh_token,\n          });\n          localToken = res.access_token;\n\n          // check if this user has a Datify account\n          return fetch(`${backendUrl}/getUser?token=${localToken}`);\n        })\n        .then((data) => data.json())\n        .then((data) => {\n          const datifyUser = data[0];\n          const statusCode = data[1];\n          if (statusCode === 404) {\n            // no Datify account so let's create one\n            navigate(\"/info-form\");\n            return;\n          }\n\n          const user = processUserInfo(datifyUser);\n          setUser(user);\n        })\n        .catch((err) => console.error(err));\n    }\n  }, [\n    tokens,\n    location.search,\n    setTokens,\n    location.pathname,\n    navigate,\n    setUser,\n  ]);\n\n  return tokens !== null && user !== null ? (\n    children\n  ) : (\n    <Landing state={location.pathname} />\n  );\n};\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Person as PersonIcon } from \"@mui/icons-material\";\nimport \"../../App.css\";\n\n/**\n * About sub-component used by Meet and Profile component.\n * Used to create the about section\n * (name, pronouns, age, picture, etc) of an user.\n *\n * @property {Object} user - User object\n * @property {Number} offsetY - offset of Y used for formatting calcuations\n * @returns {HTML} Styled div wrapped around the name, pronouns,\n * age, an picture of an user.\n *\n * @package\n * @class\n */\nconst About = ({ user, offsetY }) => {\n  return (\n    <>\n      <div className=\"pic\">\n        {user.pic ? (\n          <div\n            className=\"profilePhoto\"\n            style={{\n              backgroundImage: `url('${user.pic}')`,\n              transform: `translateY(${offsetY * 0.2}px)`,\n            }}\n          />\n        ) : (\n          <div\n            className=\"profilePhoto\"\n            style={{\n              transform: `translateY(${offsetY * 0.2}px)`,\n              padding: 0,\n              border: \"solid white\",\n            }}\n          >\n            <PersonIcon\n              style={{ height: \"100%\", width: \"100%\", color: \"white\" }}\n            />\n          </div>\n        )}\n\n        <div\n          className=\"userInfo\"\n          style={{ transform: `translateY(${offsetY * 0.3}px)` }}\n        >\n          <div className=\"nameAndAge\">\n            <div className=\"name\">{user.name}</div>\n            <div className=\"age\">{user.age}</div>\n          </div>\n\n          <div className=\"pronouns\">({user.pronouns})</div>\n\n          <div className=\"userDescription\">\n            {user.description && user.description.replace(/\\\\'/g, \"'\")}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport \"../../App.css\";\nimport { Person as PersonIcon } from \"@mui/icons-material\"; // placeholder for now\n\n/**\n * Tidbit sub-component used by Meet and Profile component.\n * For things like a user's desired relationship type or education.\n *\n * @property {Component} Component - Icon Component corresponding to\n * some user's tidbit.\n * @property {string} content - words for this Tidbit\n * @returns {HTML} Styled div wrapped around icon `img` and `span`\n * for `content`\n *\n * @package\n * @class\n */\nconst Tidbit = ({ Component = PersonIcon, content }) => {\n  return (\n    <div\n      style={{ marginBottom: \"1rem\", display: \"flex\", alignItems: \"center\" }}\n    >\n      <Component\n        style={{ fontSize: \"2rem\", marginRight: \"0.5rem\", color: \"white\" }}\n      />\n      <span>{content}</span>\n    </div>\n  );\n};\n\nexport default Tidbit;\n","import React from \"react\";\nimport \"../../App.css\";\n\n/**\n * QA sub-component used by Meet and Profile component.\n * User specified question and answer pairs.\n *\n * @property {string} Q - question about the user\n * @property {string} A - user's answer to that question\n * @returns {HTML} Styled div wrapped around said `Q` and `A`.\n *\n * @package\n * @class\n */\nconst QA = ({ Q, A }) => {\n  return (\n    <div style={{ marginBottom: \"1rem\" }}>\n      <h4>{Q}</h4>\n      <span>{A}</span>\n    </div>\n  );\n};\n\nexport default QA;\n","import React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport \"../../App.css\";\nimport { AuthContext } from \"../../Context\";\n\n/**\n * SpotifyDataBlock sub-component used by Meet and Profile component.\n * For creating the list of common artists and songs (Meet page),\n * or top artists and songs (Profile page).\n *\n * @param {Object} user - `ContextProvider` state of logged-in user's info.\n * @param {Object} userContent - The Spotify data to generate components for.\n * Contains artist or song image and name.\n * @param {String} type - Type of display we'd like to display. Either `artist` or `track`.\n * @returns {HTML} Styled div wrapped around artist or song image and name.\n *\n * @package\n * @class\n */\nconst SpotifyDataBlock = ({ user, userContent, type }) => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's access and refresh tokens.\n     * @type {Object}\n     * @memberof SpotifyDataBlock\n     */\n    tokens,\n  } = useContext(AuthContext);\n\n  /**\n   * @description An array of Objects containing a song/artist's image URL and name, returned by Spotify's API.\n   * @typedef {Object} content\n   * @memberof SpotifyDataBlock\n   */\n  /**\n   * @typedef {Function} setContent\n   * @param {Array} newState - The newly processed array of Objects containing a song/artist's image URL and name.\n   * @description Sets `content` to `newState`.\n   * @returns {void}\n   * @memberof SpotifyDataBlock\n   */\n  const [content, setContent] = useState([]);\n\n  /**\n   * Function to get artists' or songs' images.\n   *\n   * @returns {React.Fragment} - Containing list of display components for songs' and artists' images and names.\n   */\n  const getContent = useCallback(async () => {\n    const urls = await Promise.all(\n      userContent.map(async (thing) => {\n        const response = await fetch(\n          `https://api.spotify.com/v1/search?q=${type}:${thing}&type=${type}`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \" + tokens.accessToken,\n            },\n          }\n        );\n        const js = await response.json();\n        let urlTry;\n        try {\n          if (type === \"artist\")\n            urlTry = await js.artists.items[0].images[0].url;\n          else urlTry = await js.tracks.items[0].album.images[0].url;\n        } catch (e) {\n          urlTry = null;\n        }\n\n        const item = await {\n          name: thing,\n          img: await urlTry,\n        };\n        return await item;\n      })\n    );\n    setContent(urls);\n  }, [tokens, type, userContent]);\n\n  useEffect(() => {\n    getContent();\n  }, [getContent]);\n\n  return (\n    <>\n      {user &&\n        content.map((content, ind) => (\n          <div style={{ display: \"flex\", alignItems: \"center\" }} key={ind}>\n            <div\n              className=\"photo\"\n              style={{\n                backgroundImage: `url('${content.img}')`,\n                backgroundColor: \"grey\",\n                width: 85,\n                height: 85,\n                marginBottom: \"1rem\",\n              }}\n            />\n\n            <span style={{ paddingLeft: \"1rem\" }}>{content.name}</span>\n          </div>\n        ))}\n    </>\n  );\n};\n\nexport default SpotifyDataBlock;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport \"../../App.css\";\nimport About from \"./About\";\nimport Tidbit from \"./Tidbit\";\nimport QA from \"./QA\";\nimport SpotifyDataBlock from \"./SpotifyDataBlock\";\nimport {\n  School as SchoolIcon,\n  Search as SearchIcon,\n  Work as WorkIcon,\n  Favorite as FavoriteIcon,\n  LocationOn as LocationOnIcon,\n  AccountBalance as AccountBalanceIcon,\n  Height as HeightIcon,\n} from \"@mui/icons-material\";\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\n/**\n * MatchInfo sub-component used by Meet and Matched component.\n * Template for displaying a match or a unmet potential match.\n *\n * @property {Boolean} meet - determines if this is for the Meet component or\n * Matched component\n * @property {Object} user - User object\n * @property {Number} offsetY - offset of Y used for formatting calcuations\n * @property {Function} dislike - function to dislike a user for the Meet component\n * @property {Function} like - function to like a user for the Meet component\n * @returns {HTML} Styled div wrapped around said common artists, common songs,\n * Tidbits, QAs, and like and dislike buttons (for Meet component only).\n *\n * @package\n * @class\n */\nconst MatchInfo = ({ meet, user, offsetY, dislike, like }) => {\n  return (\n    <>\n      <About user={user} offsetY={offsetY} />\n      <div className=\"container\">\n        <h3>Artists in Common</h3>\n        {(!user || !user.artists_in_common.length) && (\n          <Title level={5} style={{ color: \"#dbdbdb\" }}>\n            No top artists in common\n          </Title>\n        )}\n        <SpotifyDataBlock\n          user={user}\n          userContent={user.artists_in_common}\n          type=\"artist\"\n        />\n\n        <h3>Songs in Common</h3>\n        {(!user || !user.songs_in_common.length) && (\n          <Title level={5} style={{ color: \"#dbdbdb\" }}>\n            No top songs in common\n          </Title>\n        )}\n        <SpotifyDataBlock\n          user={user}\n          userContent={user.songs_in_common}\n          type=\"track\"\n        />\n\n        {user && user.tidbits && <h3>Tidbits</h3>}\n        <div className=\"basic-info column-flex\">\n          {user &&\n            user.tidbits.map((tidbit, ind) => {\n              const { key, val } = tidbit;\n              if (val) {\n                let component;\n                switch (key) {\n                  case \"desired_relationship\":\n                    component = SearchIcon;\n                    break;\n                  case \"education\":\n                    component = SchoolIcon;\n                    break;\n                  case \"occupation\":\n                    component = WorkIcon;\n                    break;\n                  case \"sexual_orientation\":\n                    component = FavoriteIcon;\n                    break;\n                  case \"location\":\n                    component = LocationOnIcon;\n                    break;\n                  case \"political_view\":\n                    component = AccountBalanceIcon;\n                    break;\n                  case \"height\":\n                    component = HeightIcon;\n                    break;\n                  default:\n                }\n\n                return <Tidbit key={ind} Component={component} content={val} />;\n              } else return <></>;\n            })}\n        </div>\n\n        {user && user.QAs && <h3>QAs</h3>}\n        {user &&\n          user.QAs.map((qa, ind) => {\n            if (qa.A) return <QA Q={qa.Q} A={qa.A} key={ind} />;\n            else return <></>;\n          })}\n\n        {meet && (\n          <div\n            style={{\n              position: \"fixed\",\n              bottom: 75,\n              left: \"50%\",\n              transform: \"translate(-50%, -50%)\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <div style={{ marginRight: \"5rem\" }}>\n                <Button\n                  ghost\n                  size=\"large\"\n                  icon={<CloseOutlined style={{ color: \"white\" }} />}\n                  onClick={dislike}\n                  data-testid=\"left-swipe\"\n                />\n              </div>\n              <Button\n                ghost\n                size=\"large\"\n                icon={<CheckOutlined style={{ color: \"white\" }} />}\n                onClick={like}\n                data-testid=\"right-swipe\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default MatchInfo;\n","import React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport { Spin } from \"antd\";\nimport \"../App.css\";\nimport MatchInfo from \"./common/MatchInfo\";\nimport { AuthContext } from \"../Context\";\nimport { processUserInfo } from \"../helpers\";\nimport {\n  School as SchoolIcon,\n  Search as SearchIcon,\n  Work as WorkIcon,\n  Favorite as FavoriteIcon,\n  LocationOn as LocationOnIcon,\n  AccountBalance as AccountBalanceIcon,\n  Height as HeightIcon,\n} from \"@mui/icons-material\";\nimport { Typography } from \"antd\";\nimport { backendUrl } from \"../firebase\";\n\nconst { Title } = Typography;\n\n/**\n * Component for the Meet page\n *\n * @returns {React.Fragment} Meet page, including photo,\n * basic information, and artists and songs in common with an unmet\n * user.\n *\n * @class\n */\nconst Meet = () => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof Meet\n     */\n    user,\n    /**\n     * Function from `ContextProvider` for setting next set of users\n     * the current user hasn't met.\n     * @type {Function}\n     * @memberof Meet\n     */\n    setUnmetList,\n    /**\n     * `ContextProvider` state of logged-in user's list of unmet users.\n     * @type {Object}\n     * @memberof Meet\n     */\n    unmetList,\n    /**\n     * `ContextProvider` state of index of the next unmet user to appear\n     * on Meet page.\n     * @type {Number}\n     * @memberof Meet\n     */\n    unmetListInd,\n    /**\n     * Function from `ContextProvider` for setting the next index in\n     * `unmetList` that should appear on Meet page.\n     * @type {Function}\n     * @memberof Meet\n     */\n    setUnmetListInd,\n  } = useContext(AuthContext);\n  const [offsetY, setOffsetY] = useState(0);\n\n  /**\n   * @description The unmet user at `unmetListInd` of `unmetList`.\n   * @typedef {Object} unmetUser\n   * @memberof Meet\n   */\n  /**\n   * @typedef {Function} setUnmetUser\n   * @param {Object} newState - The next unmet user on `unmetList`.\n   * @returns {void}\n   * @memberof Meet\n   */\n  const [unmetUser, setUnmetUser] = useState({\n    user_id: \"\",\n    name: \"\",\n    pic: \"\",\n    pronouns: \"\",\n    age: 0,\n    desiredRelationship: \"\",\n    education: \"\",\n    QAs: [],\n    description: \"\",\n    artists_in_common: [],\n    songs_in_common: [],\n    tidbits: [],\n  });\n  const [loading, setLoading] = useState(true);\n  const handleScroll = () => setOffsetY(window.pageYOffset);\n\n  /**\n   * Function for fetching next batch of unmet users from our backend.\n   */\n  const getNextUser = useCallback(() => {\n    setLoading(true);\n    // get more unmet users\n    fetch(`${backendUrl}/getUnmet?email=${user.email}`)\n      .then((data) => data.json())\n      .then((data) => {\n        if (data[1] !== 200) {\n          console.error(\"Populating unmet list failed.\");\n          return;\n        }\n        const newList = data[0].map((newUser) => {\n          newUser.artists_in_common = user.top_artists.filter((artist) =>\n            newUser.top_artists.includes(artist)\n          );\n\n          newUser.songs_in_common = user.top_songs.filter((song) =>\n            newUser.top_songs.includes(song)\n          );\n          return newUser;\n        });\n        setUnmetList(newList);\n        setUnmetUser(processUserInfo(newList[0]));\n        setUnmetListInd(0);\n      })\n      .catch((err) => console.error(err));\n  }, [user.email]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    if (unmetListInd >= unmetList.length) getNextUser();\n    else setUnmetUser(processUserInfo(unmetList[unmetListInd]));\n\n    setLoading(false);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [getNextUser]);\n\n  /**\n   * Function to create LIKES relationship from user A to user B.\n   *\n   * @memberof Meet\n   * @returns {void}\n   */\n  function like() {\n    // create LIKES relationship from user to unmetUser\n    fetch(`${backendUrl}/like`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        userid_a: user.user_id,\n        userid_b: unmetUser.user_id,\n      }),\n    })\n      .then((data) => data.json())\n      .then((statusCode) => {\n        if (statusCode !== 200)\n          console.error(\"Failed to create LIKE relationship between users\");\n\n        // then get next user\n        if (unmetListInd + 1 >= unmetList.length) getNextUser();\n        else {\n          setUnmetUser(processUserInfo(unmetList[unmetListInd + 1]));\n          setUnmetListInd((latestInd) => latestInd + 1);\n        }\n      });\n  }\n\n  /**\n   * Function to create DISLIKES relationship from user A to user B.\n   *\n   * @memberof Meet\n   * @returns {void}\n   */\n  function dislike() {\n    // create DISLIKES relationship from user to unmetUser\n    fetch(`${backendUrl}/dislike`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        userid_a: user.user_id,\n        userid_b: unmetUser.user_id,\n      }),\n    })\n      .then((data) => data.json())\n      .then((statusCode) => {\n        if (statusCode !== 200)\n          console.error(\"Failed to create DISLIKE relationship between users\");\n\n        // then get next user\n        if (unmetListInd + 1 >= unmetList.length) getNextUser();\n        else {\n          setUnmetUser(processUserInfo(unmetList[unmetListInd + 1]));\n          setUnmetListInd((latestInd) => latestInd + 1);\n        }\n      });\n  }\n  return (\n    <>\n      {loading ? (\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"90vh\",\n          }}\n        >\n          <Spin size=\"large\" />\n        </div>\n      ) : (\n        <>\n          <MatchInfo\n            meet={true}\n            user={unmetUser}\n            offsetY={offsetY}\n            dislike={dislike}\n            like={like}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Meet;\n","import React from \"react\";\nimport \"../../App.css\";\nimport { Form, Button } from \"antd\";\n\nconst { Item } = Form;\n\nconst InfoFormItem = ({ child, ...props }) => {\n  return <Item {...props}>{child}</Item>;\n};\n\n/**\n * InputForm sub-component used by EditInfo subcomponent\n * (used by the Profile component) and the InfoForm component.\n * Used to create the form for editing the Tidbits and QAs\n * for a user and the inital info gathering form for a new user.\n *\n * @property {Boolean} profile - determines if this is for\n * the Profile component or EditInfo subcomponent\n * @property {Function} resetImg - function for reseting an image on\n * the form\n * @property {Object} form - form hook from Ant Design\n * @property {Function} onFinish - function called when form is submitted\n * @property {Array.<Object>} contents - the fields of the form\n *\n * @package\n * @class\n */\nconst InputForm = ({ profile, resetImg, form, onFinish, contents }) => {\n  /**\n   * Function to reset form fields back to the original answers.\n   * @memberof InputForm\n   * @returns {void}\n   * @private\n   */\n  const onReset = () => {\n    if (!profile) resetImg();\n    form.resetFields();\n  };\n  return (\n    <>\n      <Form layout=\"vertical\" form={form} name=\"basic-info\" onFinish={onFinish}>\n        {contents.map((content, ind) => (\n          <InfoFormItem {...content} key={ind} />\n        ))}\n        {profile ? (\n          <Item className=\"form-btns\">\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n            <Button htmlType=\"button\" onClick={onReset}>\n              Reset\n            </Button>\n          </Item>\n        ) : (\n          <Item className=\"form-btns\">\n            <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n              Submit\n            </Button>\n            <Button htmlType=\"button\" size=\"large\" onClick={onReset}>\n              Reset\n            </Button>\n          </Item>\n        )}\n      </Form>\n    </>\n  );\n};\n\nexport default InputForm;\n","import React, { useContext } from \"react\";\nimport \"../../App.css\";\nimport { Form } from \"antd\";\nimport { AuthContext } from \"../../Context\";\nimport { processUserInfo } from \"../../helpers\";\nimport { createEditInfoItems, factsData } from \"../../helpers\";\nimport InputForm from \"./InputForm\";\nimport { backendUrl } from \"../../firebase\";\n\n/**\n * EditInfo sub-component used by Profile component.\n * Used to create the form for editing the Tidbits and QAs\n * for a user.\n *\n * @returns {HTML} Styled div wrapped around a form for Tidbits\n * and QAs\n *\n * @package\n * @class\n */\nconst EditInfo = () => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof EditInfo\n     */\n    user,\n    /**\n     * Function from `ContextProvider` for setting logged-in user's info.\n     * @type {Function}\n     * @memberof EditInfo\n     */\n    setUser,\n  } = useContext(AuthContext);\n\n  const [form] = Form.useForm();\n\n  /**\n   * Function to send user's new Tidbits and QAs to our Neo4j.\n   * @memberof EditInfo\n   * @returns {void}\n   * @private\n   */\n  const onFinish = (values) => {\n    // for tidbits and qas, need to send `null` if have `undefined` field\n    // so that our server doesn't discard the `undefined` vals\n    const data = {\n      facts: factsData(values),\n      email: user.email,\n    };\n\n    fetch(`${backendUrl}/updateUserFacts`, {\n      method: \"PUT\",\n      mode: \"cors\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((res_data) => {\n        if (res_data[1] === 200) {\n          let datifyUser = res_data[0];\n          const user = processUserInfo(datifyUser);\n          setUser(user);\n        } // TODO: error handling\n      })\n      .catch((err) => console.error(err));\n  };\n\n  let contents = createEditInfoItems(user);\n  return (\n    <InputForm\n      profile={true}\n      form={form}\n      onFinish={onFinish}\n      contents={contents}\n    />\n  );\n};\n\nexport default EditInfo;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Switch, Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { useLocation } from \"react-router-dom\";\nimport \"../App.css\";\nimport About from \"./common/About\";\nimport EditInfo from \"./common/EditInfo\";\nimport SpotifyDataBlock from \"./common/SpotifyDataBlock\";\nimport { AuthContext } from \"../Context\";\nimport { Typography } from \"antd\";\nimport { backendUrl } from \"../firebase\";\n\nconst { Title } = Typography;\n\n/**\n * Component for the Profile page\n *\n * @returns {React.Fragment} Profile page, including a user's photo,\n * basic information, favorite artists and songs\n *\n * @class\n */\nconst Profile = () => {\n  /**\n   * @typedef {Boolean} deleteAccChecked\n   * @description (Private) state variable controlling whether the\n   * Delete Account Confirmation modal should be open.\n   * @memberof Profile\n   */\n  /**\n   * @typedef {Function} setDeleteAccChecked\n   * @param {Boolean} newState - If `false`, Delete Account\n   * Confirmation modal should be closed.\n   * If `true`, modal should be open.\n   * @description Sets `deleteAccChecked` to `newState`\n   * @returns {void}\n   * @memberof Profile\n   * @private\n   */\n  const [deleteAccChecked, setDeleteAccChecked] = useState(false);\n\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof Profile\n     */\n    user,\n    /**\n     * Function from `ContextProvider` for setting logged-in user's access and refresh tokens.\n     * @type {Function}\n     * @memberof Profile\n     */\n    setTokens,\n    /**\n     * Function from `ContextProvider` for setting logged-in user's info.\n     * @type {Function}\n     * @memberof Profile\n     */\n    setUser,\n  } = useContext(AuthContext);\n\n  /* Parallax effect for scrolling */\n  const [offsetY, setOffsetY] = useState(0);\n  const handleScroll = () => setOffsetY(window.pageYOffset);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  /**\n   * Function to open Delete Account Confirmation modal. Includes\n   * `OnOK()` and `onCancel()`.\n   *\n   * @returns {void}\n   */\n  function showConfirm() {\n    Modal.confirm({\n      centered: true,\n      title: \"Delete Account\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Are you sure you want to delete your account?\",\n      /**\n       * @description Function to actually delete account if user hits \"OK\"\n       * @memberof Profile\n       * @returns {void}\n       * @private\n       */\n      onOk() {\n        // delete acc\n        fetch(`${backendUrl}/deleteUser`, {\n          method: \"POST\",\n          mode: \"cors\",\n          credentials: \"same-origin\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email: user.email }),\n        })\n          .then((data) => data.json())\n          .then((data) => {\n            // err handling\n            if (data[1] !== 200) console.error(\"Deletion failed\");\n\n            return;\n          })\n          .then(() => {\n            // logout\n            logout();\n          })\n          .catch((err) => console.error(err));\n      },\n      /**\n       * @description Function to set `deleteAccChecked` to `false` to close modal.\n       * @memberof Profile\n       * @returns {void}\n       * @private\n       */\n      onCancel() {\n        setDeleteAccChecked(false);\n      },\n    });\n  }\n\n  /**\n   * Function to open Delete Account Confirmation modal.\n   *\n   * @memberof Profile\n   * @returns {void}\n   */\n  function deleteAcc() {\n    setDeleteAccChecked(true);\n    showConfirm();\n  }\n\n  /**\n   * Function to logout the current user.\n   *\n   * @memberof Profile\n   * @returns {void}\n   */\n  const location = useLocation();\n  function logout() {\n    // credit: https://stackoverflow.com/a/50738483/11294788\n    const url = \"https://accounts.spotify.com/en/logout\";\n    window.open(url, \"Spotify Logout\", \"width=700,height=500,top=40,left=40\");\n    new URLSearchParams(location.search).delete(\"code\");\n    setTokens(null); // Need to remove auth token\n    setUser(null);\n  }\n\n  return (\n    <>\n      <About user={user} offsetY={offsetY} />\n      <div className=\"container\">\n        <h3>Favorite Artists</h3>\n        {(!user || !user.top_artists.length) && (\n          <Title level={5} style={{ color: \"#dbdbdb\" }}>\n            No favorite artists at this time\n          </Title>\n        )}\n        <SpotifyDataBlock\n          user={user}\n          userContent={user.top_artists}\n          type=\"artist\"\n        />\n        <h3>Favorite Songs</h3>\n        {(!user || !user.top_songs.length) && (\n          <Title level={5} style={{ color: \"#dbdbdb\" }}>\n            No favorite songs at this time\n          </Title>\n        )}\n        <SpotifyDataBlock\n          user={user}\n          userContent={user.top_songs}\n          type=\"track\"\n        />\n        <h3>Edit Info</h3>\n        {user && <EditInfo />}\n        <div\n          className=\"deleteTxt\"\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          <p style={{ color: \"#E8BFFB\" }}>Delete Account</p>\n          <Switch\n            checked={deleteAccChecked}\n            onChange={deleteAcc}\n            data-testid=\"delete-acc\"\n          />\n        </div>\n\n        <div onClick={logout}>\n          <button>Logout</button>\n        </div>\n      </div>\n      );\n    </>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { ExclamationCircleOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport \"../App.css\";\nimport { AuthContext } from \"../Context\";\nimport { Person as PersonIcon } from \"@mui/icons-material\";\nimport { Typography } from \"antd\";\nimport { backendUrl } from \"../firebase\";\nimport { processUserInfo } from \"../helpers\";\nimport MatchInfo from \"./common/MatchInfo\";\n\nconst { Title } = Typography;\n\n/**\n * ProfileModal sub-component used exclusively by Match subcomponent.\n * Displays the modal containing the match's info.\n *\n * @property {Boolean} openModal - whether the modal is open or not\n * @property {Function} closeProfile - function for close button\n * @property {Object} matchUser - User object for match\n * @returns {HTML} Styled div wrapped around the modal for the profile\n * of the match.\n *\n * @package\n * @class\n */\nconst ProfileModal = ({ openModal, closeProfile, matchUser }) => {\n  /* Parallax effect for scrolling */\n  const [offsetY, setOffsetY] = useState(0);\n  const handleScroll = () => setOffsetY(window.pageYOffset);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <Modal\n      className=\"profile-modal\"\n      centered\n      width=\"100vw\"\n      visible={openModal}\n      closable={false}\n      footer={[\n        <Button key=\"back\" onClick={closeProfile}>\n          Close\n        </Button>,\n      ]}\n      bodyStyle={{\n        backgroundColor: \"black\",\n      }}\n    >\n      <MatchInfo meet={false} user={matchUser} offsetY={offsetY} />\n    </Modal>\n  );\n};\n\n/**\n * Match sub-component used exclusively by Matched component.\n * Displays a match's profile picture, name, and contact info.\n *\n * @property {string} imgPath - path to match's image file\n * @property {string} name - name of match\n * @property {string} contact - contact of match\n * @returns {HTML} Styled div wrapped around said match component.\n *\n * @package\n * @class\n */\nconst Match = ({\n  matchList,\n  user_id,\n  index,\n  imgPath,\n  name,\n  contact,\n  setMatchList,\n  matchUser,\n}) => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof Match\n     */\n    user,\n  } = useContext(AuthContext);\n\n  /**\n   * @typedef {Boolean} openModal\n   * @description (Private) state variable controlling whether the\n   * Display Match Profile modal should be open.\n   * @memberof Match\n   */\n  /**\n   * @typedef {Function} setOpenModal\n   * @param {Boolean} newState - If `false`, Display Match Profile\n   * modal should be closed.\n   * If `true`, modal should be open.\n   * @description Sets `openModal` to `newState`\n   * @returns {void}\n   * @memberof Match\n   * @private\n   */\n  const [openModal, setOpenModal] = useState(false);\n\n  /**\n   * Function to open Delete Match Confirmation modal. Includes\n   * `OnOK()`.\n   *\n   * @returns {void}\n   */\n  function showConfirm() {\n    Modal.confirm({\n      centered: true,\n      title: \"Delete Match\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Are you sure you want to delete this match?\",\n      /**\n       * @description Function to actually delete match if user hits \"OK\"\n       * @memberof Match\n       * @returns {void}\n       * @private\n       */\n      onOk() {\n        // DISLIKE this user\n        fetch(`${backendUrl}/dislike`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            userid_a: user.user_id,\n            userid_b: user_id,\n          }),\n        })\n          .then((data) => data.json())\n          .then((statusCode) => {\n            if (statusCode !== 200)\n              console.error(\n                \"Failed to create DISLIKE relationship between users\"\n              );\n\n            // get rid of this user from matchList\n            const newList = [...matchList];\n            newList.splice(index, 1);\n\n            setMatchList(newList);\n          });\n      },\n    });\n  }\n\n  /**\n   * Function to open Display Match modal.\n   *\n   * @returns {void}\n   */\n  function showProfile() {\n    setOpenModal(true);\n  }\n\n  /**\n   * Function to open Display Match modal.\n   *\n   * @returns {void}\n   */\n  function closeProfile() {\n    setOpenModal(false);\n  }\n\n  matchUser = processUserInfo(matchUser);\n  matchUser.artists_in_common = user.top_artists.filter((artist) =>\n    matchUser.top_artists.includes(artist)\n  );\n  matchUser.songs_in_common = user.top_songs.filter((song) =>\n    matchUser.top_songs.includes(song)\n  );\n  return (\n    <div\n      data-testid=\"match\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: \"1rem\",\n        marginLeft: \"1rem\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        <div onClick={showProfile}>\n          {imgPath ? (\n            <img className=\"matchPhoto\" src={imgPath} alt=\"pfp\" />\n          ) : (\n            <div\n              className=\"matchPhoto\"\n              style={{\n                padding: 0,\n                border: \"solid white\",\n              }}\n            >\n              <PersonIcon\n                style={{ height: \"100%\", width: \"100%\", color: \"white\" }}\n              />\n            </div>\n          )}\n        </div>\n        <div style={{ marginLeft: \"1rem\", marginRight: \"1rem\" }}>\n          <h4>{name}</h4>\n          <span>{contact}</span>\n        </div>\n      </div>\n      <div>\n        <Button\n          ghost\n          style={{ border: 0 }}\n          size=\"medium\"\n          icon={<CloseOutlined style={{ color: \"white\" }} />}\n          onClick={showConfirm}\n          button-testid={`delete-match-${index}`}\n        />\n      </div>\n      <ProfileModal\n        openModal={openModal}\n        closeProfile={closeProfile}\n        matchUser={matchUser}\n      />\n    </div>\n  );\n};\n\n/**\n * Component for the Matched page\n *\n * @returns {React.Fragment} Matched page, including all a user's matches,\n * each with a profile pic, name, and contact info.\n *\n * @class\n */\nconst Matched = () => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's info.\n     * @type {Object}\n     * @memberof Matched\n     */\n    user,\n  } = useContext(AuthContext);\n\n  /**\n   * @description The list of people the current user's in mutual like with.\n   * @typedef {Array} matchList\n   * @memberof Matched\n   */\n  /**\n   * @typedef {Function} setMatchList\n   * @param {Object} newState - The new list of people the current\n   * user's in mutual like with. Used when deleting a match.\n   * @returns {void}\n   * @memberof Matched\n   */\n  const [matchList, setMatchList] = useState([]);\n\n  useEffect(() => {\n    fetch(`${backendUrl}/getMatched?email=${user.email}`)\n      .then((data) => data.json())\n      .then((data) => {\n        if (data[1] === 200) {\n          setMatchList(\n            data[0].map((item, index) => {\n              return (\n                <Match\n                  matchList={matchList}\n                  setMatchList={handleChange}\n                  key={index}\n                  index={index}\n                  user_id={item.user_id}\n                  imgPath={item.pic}\n                  name={item.name}\n                  contact={item.email}\n                  matchUser={item}\n                />\n              );\n            })\n          );\n        }\n      })\n      .catch((err) => console.error(err));\n  }, [user.email, matchList.length]);\n\n  function handleChange(list) {\n    setMatchList(list);\n  }\n\n  return (\n    <div className=\"container\" style={{ margin: \"1rem\" }}>\n      <h1 style={{ color: \"white\" }}>Matches</h1>\n      {matchList}\n      {!matchList.length && (\n        <Title level={5} style={{ color: \"#dbdbdb\", textAlign: \"center\" }}>\n          No matches yet. Let's try to meet more people~\n        </Title>\n      )}\n    </div>\n  );\n};\n\nexport default Matched;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"antd\";\nimport PeopleOutlineIcon from \"@mui/icons-material/PeopleOutline\";\nimport { UserOutlined, MessageOutlined } from \"@ant-design/icons\";\nimport \"../App.css\";\n\n/**\n * Button used exclusively by the Navbar.\n *\n * @returns {HTML} `<Link />` with `link`'s `href` wrapped around icon\n * button with `icon` as the icon.\n *\n * @package\n * @class\n */\nconst NavbarBtn = ({ icon, link }) => {\n  return (\n    <Link to={link}>\n      <Button size=\"large\" ghost style={{ border: 0 }} icon={icon} />\n    </Link>\n  );\n};\n\n/**\n * Navbar Component that clings to the bottom of the screen on every\n * page. Takes no props.\n *\n * @returns {HTML} Styled div containing 3 buttons, each of which\n * lead to a different page of our app.\n *\n * @class\n */\nconst Navbar = () => {\n  return (\n    <div\n      style={{\n        backgroundColor: \"#E8BFFB\",\n        position: \"fixed\",\n        bottom: 0,\n        width: \"100vw\",\n        display: \"flex\",\n        justifyContent: \"space-evenly\",\n        alignItems: \"center\",\n        height: \"4rem\",\n      }}\n    >\n      <NavbarBtn\n        icon={<PeopleOutlineIcon style={{ color: \"black\", height: \"100%\" }} />}\n        link=\"/meet\"\n      />\n      <NavbarBtn icon={<MessageOutlined />} link=\"/matched\" />\n      <NavbarBtn icon={<UserOutlined />} link=\"/profile\" />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useContext } from \"react\";\nimport { Form, Input, DatePicker, Upload, Typography } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { getBase64, beforeUpload } from \"../fileUpload\";\nimport \"../App.css\";\nimport { AuthContext } from \"../Context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { processUserInfo } from \"../helpers\";\nimport { createInfoItems, tidbitData, QAData } from \"../helpers\";\nimport InputForm from \"./common/InputForm\";\nimport { backendUrl } from \"../firebase\";\n\nconst { Title, Paragraph } = Typography;\n\n/**\n * Form for new Datify user to fill in their basic information.\n *\n * @returns {HTML} Page containing form asking for things like name, pronouns, birth month, etc.\n *\n * @class\n */\nconst InfoForm = () => {\n  const {\n    /**\n     * `ContextProvider` state of logged-in user's access and refresh tokens.\n     * @type {Object}\n     * @memberof InfoForm\n     */\n    tokens,\n    /**\n     * Function from `ContextProvider` for setting logged-in user's info.\n     * @type {Function}\n     * @memberof InfoForm\n     */\n    setUser,\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  /**\n   * @typedef {String} img\n   * @description (Private) base64 string of user's uploaded profile picture.\n   * @memberof InfoForm\n   */\n  /**\n   * @typedef {Function} setImg\n   * @param {String} newState - The new image we're uploading.\n   * @description Sets `img` to `newState`.\n   * @returns {void}\n   * @memberof InfoForm\n   * @private\n   */\n  const [img, setImg] = useState();\n\n  /**\n   * @typedef {Boolean} validImg\n   * @description (Private) Whether the uploaded image is valid (less than 2MB and a jpg/png).\n   * @memberof InfoForm\n   */\n  /**\n   * @typedef {Function} setValidImg\n   * @param {Boolean} newState - Whether the new image is valid.\n   * @description Sets `validImg` to `newState`.\n   * @returns {void}\n   * @memberof InfoForm\n   * @private\n   */\n  const [validImg, setValidImg] = useState(false);\n\n  /**\n   * @typedef {Array} fileList\n   * @description (Private) Array of File used internally by Ant\n   * Design's `<Upload />`\n   * @memberof InfoForm\n   */\n  /**\n   * @typedef {Function} setFileList\n   * @param {File} newState - The new image we're uploading.\n   * @description Sets `fileList` to `newState`.\n   * @returns {void}\n   * @memberof InfoForm\n   * @private\n   */\n  const [fileList, setFileList] = useState([]);\n  const [form] = Form.useForm();\n\n  /**\n   * Function for getting base64 string from uploaded profile picture.\n   * @memberof InfoForm\n   * @returns {void}\n   * @private\n   */\n  const handleChange = (info) => {\n    if (validImg) {\n      getBase64(info.file, (imageUrl) => {\n        setImg(imageUrl);\n      });\n\n      setFileList([...info.fileList]);\n    } else {\n      setImg();\n      setFileList([]);\n    }\n  };\n\n  /**\n   * Function to send user's basic info to our Neo4j.\n   * @memberof InfoForm\n   * @returns {void}\n   * @private\n   */\n  const onFinish = (values) => {\n    // for tidbits and qas, need to send `null` if have `undefined` field\n    // so that our server doesn't discard the `undefined` vals\n    const data = {\n      name: values.name,\n      email: values.email,\n      pronouns: values.pronouns,\n      birth_month: values.birth_month._d,\n      description: values.description,\n      pic: img,\n      qas: QAData(values),\n      tidbits: tidbitData(values),\n      access_token: tokens.accessToken,\n      refresh_token: tokens.refreshToken,\n    };\n\n    fetch(`${backendUrl}/createUserFromAccessToken`, {\n      method: \"POST\",\n      mode: \"cors\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((res_data) => {\n        if (res_data[1] === 200) {\n          let datifyUser = res_data[0];\n          const user = processUserInfo(datifyUser);\n          setUser(user);\n          navigate(\"/profile\");\n        } // TODO: error handling\n      })\n      .catch((err) => console.error(err));\n  };\n\n  /**\n   * Function to reset the image field.\n   * @memberof InfoForm\n   * @returns {void}\n   * @private\n   */\n  const resetImg = () => {\n    setImg();\n  };\n\n  const contents = [\n    {\n      child: <Input />,\n      name: \"name\",\n      label: \"Name\",\n      rules: [{ required: true }],\n    },\n    {\n      child: <Input />,\n      name: \"email\",\n      label: \"Email\",\n      rules: [{ required: true }],\n    },\n    {\n      child: <Input />,\n      name: \"pronouns\",\n      label: \"Pronouns\",\n      rules: [{ required: true }],\n    },\n    {\n      child: <DatePicker picker=\"month\" />,\n      name: \"birth_month\",\n      label: \"Birth Month\",\n      rules: [{ required: true }],\n    },\n    {\n      child: <Input />,\n      name: \"description\",\n      label: \"Description\",\n      rules: [{ required: true }],\n    },\n    {\n      child: (\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          beforeUpload={(file) =>\n            beforeUpload(file, (validPic) => {\n              setValidImg(validPic);\n            })\n          }\n          onChange={handleChange}\n          fileList={fileList}\n        >\n          {img ? (\n            <div\n              className=\"photo\"\n              style={{\n                backgroundImage: `url('${img}')`,\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: 0,\n              }}\n            />\n          ) : (\n            <div className=\"column-flex\">\n              <PlusOutlined />\n              <div style={{ marginTop: 8 }}>Upload</div>\n            </div>\n          )}\n        </Upload>\n      ),\n      name: \"profile_pic\",\n      label: \"Profile Picture\",\n      valuePropName: \"props\",\n    },\n  ];\n\n  return (\n    <div className=\"container\">\n      <Title>Basic Info</Title>\n      <Paragraph>Help us help you build your profile!</Paragraph>\n      <InputForm\n        profile={false}\n        resetImg={resetImg}\n        form={form}\n        onFinish={onFinish}\n        contents={createInfoItems(contents)}\n      />\n    </div>\n  );\n};\n\nexport default InfoForm;\n","import { message } from \"antd\";\n\n/**\n * Function to turn File into base64 string then pass control to\n * callback. Taken from Ant Design's docs.\n * @param {File} img - The new image user's trying to upload.\n * @param {Function} callback - Function to run after FileReader has\n * loaded the `img` successfully.\n * @returns {void}\n */\nexport function getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\n/**\n * Function to ensure uploaded image's type is jpeg/png and smaller than 2MB.\n * Mostly taken from Ant Design's docs.\n * @param {File} file - The new image user's trying to upload.\n * @param {Function} callback - Function that sets state in caller with whether or not the newly uploaded image is valid.\n * @returns {Boolean} - Always returns `false` because we want to handle uploads manually.\n */\nexport function beforeUpload(file, callback) {\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n  if (!isJpgOrPng) {\n    message.error(\"You can only upload JPG/PNG file!\");\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error(\"Image must smaller than 2MB!\");\n  }\n\n  callback(isJpgOrPng && isLt2M);\n  return false;\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\n/**\n * Component for the Not Found page\n *\n * @returns {HTML} Page telling user their path is invalid.\n *\n * @class\n */\nconst NotFound = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"90vh\",\n      }}\n    >\n      <Title>404 Page not found</Title>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport Meet from \"./components/Meet\";\nimport Profile from \"./components/Profile\";\nimport Matched from \"./components/Matched\";\nimport Landing from \"./components/Landing\";\nimport Navbar from \"./components/Navbar\";\nimport InfoForm from \"./components/InfoForm\";\nimport NotFound from \"./components/NotFound\";\nimport \"./App.css\";\n\n/**\n * Wrapper component for proper page (rendered conditionally based on\n * history path) and navigation bar. Takes no props.\n *\n * @returns {React.Fragment} Wrapper around Routes and Navigation Bar\n *\n * @class\n */\nconst App = () => {\n  return (\n    <>\n      <Routes>\n        <Route exact path=\"/\" element={<Landing />} />\n        <Route path=\"/login\" element={<Landing />} />\n        <Route path=\"/info-form\" element={<InfoForm />} />\n        <Route\n          path=\"/meet\"\n          element={\n            <PrivateRoute>\n              <Meet />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/profile\"\n          element={\n            <PrivateRoute>\n              <Profile />\n            </PrivateRoute>\n          }\n        />\n        <Route\n          path=\"/matched\"\n          element={\n            <PrivateRoute>\n              <Matched />\n            </PrivateRoute>\n          }\n        />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n\n      <Navbar />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ContextProvider } from \"./Context.js\";\n\nReactDOM.render(\n  <ContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </ContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}